# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Packer build CI

on:
  push:
    branches: ["main"]

jobs:
  packer:
    name: Packer build
    runs-on: ubuntu-latest

    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}  # Set DB_USERNAME from new secret
      DB_DATABASE: ${{ secrets.DB_DATABASE }}    # Existing database secret
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}    # Set new password secret
      DB_HOST: ${{ secrets.DB_HOST }}            # Set database host from secret

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy all files
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip ./
    
      - name: List files after zipping
        run: ls -alh

      - name: Delete copied files
        run: rm -rf webapp && ls -R

      - name: List files after deleting
        run: ls -alh

      - name: Install and start MySQL
        run: |
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service

      - name: Connect to MySQL and create database
        run: |
          sudo mysql --user='${{ secrets.DB_USERNAME }}' --password='${{ secrets.DB_PASSWORD }}' -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_DATABASE }};"

      - name: Check Node.js and npm versions
        run: |
          node --version
          npm --version

      - name: Install dependencies
        run: |
          npm install

      - name: Run tests
        run: |
            echo "Starting tests..."
            npm test || {
              echo "Tests failed. Here are the logs:";
              npm test -- --verbose;  # Add verbose logging for more details
              exit 1;  # Exit with an error code
            }
        

      - name: Setup `awscli`
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEV_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEV_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}  

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: packer init ./packer/aws.pkr.hcl

      - name: Run `packer fmt` and check for changes
        id: format
        run: |
          packer fmt -check -diff ./packer/aws.pkr.hcl || exit 1

      - name: Run `packer validate`
        id: validate
        run: |
          ls -l &&
          packer validate -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}' \
          -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
          -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
          -var 'DB_DATABASE=${{ secrets.DB_DATABASE }}' \
          -var 'DB_HOST=${{ secrets.DB_HOST }}' \
          -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
          -var 'DB_PORT=${{ secrets.DB_PORT }}' \
          -var 'source_ami=${{ vars.SOURCE_AMI }}' \
          -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
          -var 'ssh_username=${{ vars.SSH_USERNAME }}' \
          -var 'aws_region=${{ vars.AWS_REGION }}' \
          -var 'subnet_id=${{ vars.SUBNET_ID }}' \
          -var 'vpc_id=${{ vars.VPC_ID }}' \
          -var 'ami_users=${{ vars.AMI_USERS }}' \
          ./packer/aws.pkr.hcl

      - name: Run `packer build`
        id: build
        run: |
            ls -l &&
            packer build -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
            -var 'DB_DATABASE=${{ secrets.DB_DATABASE }}' \
            -var 'DB_HOST=${{ secrets.DB_HOST }}' \
            -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
            -var 'DB_PORT=${{ secrets.DB_PORT }}' \
            -var 'source_ami=${{ vars.SOURCE_AMI }}' \
            -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
            -var 'ssh_username=${{ vars.SSH_USERNAME }}' \
            -var 'aws_region=${{ vars.AWS_REGION }}' \
            -var 'subnet_id=${{ vars.SUBNET_ID }}' \
            -var 'vpc_id=${{ vars.VPC_ID }}' \
            -var 'ami_users=${{ vars.AMI_USERS }}' \
            ./packer/aws.pkr.hcl | tee build.log

            # Extract AMI ID from packer output
            AMI_ID=$(grep -oP 'AMI: \Kami-[a-zA-Z0-9]+' build.log)
            if [ -z "$AMI_ID" ]; then
              echo "Error: AMI ID not found in packer output."
              exit 1
            fi
            echo "AMI ID: $AMI_ID"
            echo "ami_id=$AMI_ID" >> $GITHUB_ENV

      - name: Output AMI ID
        id: output
        run: |
          echo "Using AMI ID: ${{ env.ami_id }}"
      
      - name: Setup `awscli`
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_DEMO_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_DEMO_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}

      - name: Retrieve the latest version of the Launch Template
        id: retrieve_latest_version
        run: |
          LATEST=$(aws ec2 describe-launch-templates \
            --launch-template-ids "${{ vars.LAUNCH_TEMPLATE_ID }}" \
            --query "LaunchTemplates[0].LatestVersionNumber" \
            --output text)
          echo "Latest Launch Template Version: $LATEST"
          echo "LATEST=$LATEST" >> $GITHUB_ENV
    
        # [NEW] Create a new Launch Template version with the latest AMI
      - name: Create a new Launch Template version
        id: create_launch_template_version
        run: |
            aws ec2 create-launch-template-version \
              --launch-template-id "${{ vars.LAUNCH_TEMPLATE_ID }}" \
              --version-description "New version with AMI ID ${{ env.ami_id }}" \
              --source-version "$LATEST" \
              --launch-template-data "{\"ImageId\": \"${{ env.ami_id }}\"}" \
              --output json > new_launch_template_version.json
    
            # Extract the new version number
            NEW_VERSION=$(jq -r '.LaunchTemplateVersion.VersionNumber' new_launch_template_version.json)
            echo "New Launch Template Version: $NEW_VERSION"
            echo "new_launch_template_version=$NEW_VERSION" >> $GITHUB_ENV

    
        # [NEW] Update Auto Scaling group to use the new Launch Template version
      - name: Update Auto Scaling Group
        id: update_asg
        run: |
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name "${{ vars.AUTOSCALING_GROUP_NAME }}" \
            --launch-template "LaunchTemplateId=${{ vars.LAUNCH_TEMPLATE_ID }},Version=${{ env.new_launch_template_version }}" \
            --output json
    
      # [NEW] Start Instance Refresh
      - name: Start Instance Refresh
        id: start_instance_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "${{ vars.AUTOSCALING_GROUP_NAME }}" \
            --output json | jq -r '.InstanceRefreshId')
    
          echo "Instance Refresh ID: $REFRESH_ID"
          echo "instance_refresh_id=$REFRESH_ID" >> $GITHUB_ENV
    
        # [NEW] Wait for Instance Refresh to complete
      - name: Wait for Instance Refresh
        id: wait_for_refresh
        run: |
          STATUS="InProgress"
          while [ "$STATUS" == "InProgress" ]; do
            echo "Waiting for Instance Refresh to complete..."
            sleep 30
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "${{ vars.AUTOSCALING_GROUP_NAME }}" \
              --instance-refresh-ids "${{ env.instance_refresh_id }}" \
              --output json | jq -r '.InstanceRefreshes[0].Status')
            echo "Current status: $STATUS"
          done
    
          if [ "$STATUS" != "Successful" ]; then
            echo "Instance Refresh failed with status: $STATUS"
            exit 1
          fi
          echo "Instance Refresh completed successfully."