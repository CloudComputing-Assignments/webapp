# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Packer build CI

on:
  push:
    branches: ["main"]

jobs:
  packer:
    name: Packer build
    runs-on: ubuntu-latest

    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}  # Set DB_USERNAME from new secret
      DB_DATABASE: ${{ secrets.DB_DATABASE }}    # Existing database secret
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}    # Set new password secret
      DB_HOST: ${{ secrets.DB_HOST }}            # Set database host from secret

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy all files
        run: rsync -arv --exclude='.git/' --exclude='.github/' --exclude='.gitignore' . ./webapp && ls -R

      - name: Zip file
        uses: montudor/action-zip@v1
        with:
          args: zip -r webapp.zip ./
    
      - name: List files after zipping
        run: ls -alh

      - name: Delete copied files
        run: rm -rf webapp && ls -R

      - name: List files after deleting
        run: ls -alh

      - name: Install and start MySQL
        run: |
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service

      - name: Connect to MySQL and create database
        run: |
          sudo mysql --user='${{ secrets.DB_USERNAME }}' --password='${{ secrets.DB_PASSWORD }}' -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.DB_DATABASE }};"

      - name: Check Node.js and npm versions
        run: |
          node --version
          npm --version

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          npm install

      - name: Run tests
        run: |
            echo "Starting tests..."
            npm test || {
              echo "Tests failed. Here are the logs:";
              npm test -- --verbose;  # Add verbose logging for more details
              exit 1;  # Exit with an error code
            }
        

      - name: Setup `awscli`
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}  

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run `packer init`
        id: init
        run: packer init ./packer/aws.pkr.hcl

      - name: Run `packer fmt` and check for changes
        id: format
        run: |
          packer fmt -check -diff ./packer/aws.pkr.hcl || exit 1

      - name: Run `packer validate`
        id: validate
        run: |
          cd packer/ && ls -l &&
          packer validate -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}' \
          -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
          -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
          -var 'DB_DATABASE=${{ secrets.DB_DATABASE }}' \
          -var 'DB_HOST=${{ secrets.DB_HOST }}' \
          -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
          -var 'DB_PORT=${{ secrets.DB_PORT }}' \
          -var 'source_ami=${{ vars.SOURCE_AMI }}' \
          -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
          -var 'ssh_username=${{ vars.SSH_USERNAME }}' \
          -var 'aws_region=${{ vars.AWS_REGION }}' \
          -var 'subnet_id=${{ vars.SUBNET_ID }}' \
          -var 'vpc_id=${{ vars.VPC_ID }}' \
          -var 'ami_users=${{ vars.AMI_USERS }}' \
          aws.pkr.hcl

      - name: Run `packer build`
        id: build
        run: |
            cd packer/ && ls -l &&
            packer build -var 'aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -var 'aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -var 'DB_USERNAME=${{ secrets.DB_USERNAME }}' \
            -var 'DB_DATABASE=${{ secrets.DB_DATABASE }}' \
            -var 'DB_HOST=${{ secrets.DB_HOST }}' \
            -var 'DB_PASSWORD=${{ secrets.DB_PASSWORD }}' \
            -var 'DB_PORT=${{ secrets.DB_PORT }}' \
            -var 'source_ami=${{ vars.SOURCE_AMI }}' \
            -var 'instance_type=${{ vars.INSTANCE_TYPE }}' \
            -var 'ssh_username=${{ vars.SSH_USERNAME }}' \
            -var 'aws_region=${{ vars.AWS_REGION }}' \
            -var 'subnet_id=${{ vars.SUBNET_ID }}' \
            -var 'vpc_id=${{ vars.VPC_ID }}' \
            -var 'ami_users=${{ vars.AMI_USERS }}' \
            aws.pkr.hcl

      - name: Output AMI ID
        id: output
        run: |
          echo "AMI ID: ${{ steps.build.outputs.ami_id }}"